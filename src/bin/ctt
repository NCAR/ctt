#!/usr/bin/env python3
import argparse
import getpass
import grp
import os
import sys
from syslog import syslog

import ctt


def _authorized_user(user, authorized_teams):
    for team in authorized_teams:
        try:
            t = grp.getgrnam(team)
            if user in t[3]:
                return t[0]
        except KeyError:
            pass
    return None

def main():
    conf = ctt.get_config()
    logme = " ".join(sys.argv)
    syslog(logme)

    user = os.environ.get("SUDO_USER")

    if user is None:
        user = getpass.getuser()  # if not run via sudo

    if user == "root":
        print("You can't run ctt as root")
        sys.exit(1)

    if not _authorized_user(getpass.getuser(), conf.get("users", "teams").split(" ")):
        print("Current user is not authorized to run ctt")
        sys.exit(1)

    parser = _cli(conf)
    args = parser.parse_args()
    args.user = user

    cluster = ctt.CTT(conf)

    # when no subcommand given func isn't set
    if "func" not in vars(args):
        parser.print_help()
    else:
        args.func(cluster, args, conf)


def _issues(parser):
    parser.add_argument("issue", type=int, nargs="+", help="ctt issue numbers")


def _issues_and_comment(parser):
    _issues(parser)
    parser.add_argument("comment")


def _ticket_args(parser, conf):
    parser.add_argument("-T", "--xticket", help="Toggle an external (HPE,IBM) ticket")
    parser.add_argument("-a", "--assign", choices=("ssg", "casg"))
    parser.add_argument("-c", "--cluster", default=conf.get("cluster", "name"))
    parser.add_argument("-s", "--severity", choices=("1", "2", "3", "4"))
    parser.add_argument(
        "-t", "--ticket", help="Attach an existing EV ticket to this issue"
    )
    parser.add_argument(
        "-x",
        "--type",
        choices=("h", "h!", "s", "t", "u", "o"),
        help="Hardware, Software, Test, Unknown, Other",
    )


def _cli(conf):
    parser = argparse.ArgumentParser()
    ev_enabled = "True" != conf.getboolean("ev", "enabled")
    parser.add_argument(
        "--noev",
        action="store_true",
        help="Do not update EV ticket",
        default=(ev_enabled),
    )
    subparsers = parser.add_subparsers()
    # TODO improve reuse of subparser args since so many subcommands have similar arguments

    parser_release = subparsers.add_parser("release")
    parser_release.add_argument("issue", type=int, help="ctt issue number")
    parser_release.add_argument("node", nargs="+")
    parser_release.set_defaults(func=issue_release_sibs)

    parser_evopen = subparsers.add_parser("evopen")
    _issues(parser_evopen)
    parser_evopen.set_defaults(func=ticket_open)

    parser_attach = subparsers.add_parser("attach")
    _issues(parser_attach)
    parser_attach.add_argument("filepath")
    parser_attach.set_defaults(func=issue_attach)

    parser_show = subparsers.add_parser("show")
    _issues(parser_show)
    parser_show.add_argument(
        "-d", action="store_true", help="Show detail/history of ticket"
    )
    parser_show.set_defaults(func=issue_show)

    parser_stats = subparsers.add_parser("stats")
    parser_stats.add_argument("-n", "--node")
    parser_stats.add_argument("-c", "--counts", action="store_true")
    parser_stats.set_defaults(func=issue_stats)

    parser_listcmd = subparsers.add_parser("list")
    parser_listcmd.add_argument(
        "-s",
        "--status",
        choices=("open", "closed", "deleted", "all"),
        default="open",
    )
    parser_listcmd.add_argument("--verbose", "-v", action="count", default=0)
    parser_listcmd.set_defaults(func=issue_list)

    parser_evclose = subparsers.add_parser("evclose")
    _issues_and_comment(parser_evclose)
    parser_evclose.set_defaults(func=ticket_close)

    parser_comment = subparsers.add_parser("comment")
    _issues_and_comment(parser_comment)
    parser_comment.set_defaults(func=issue_comment)

    parser_close = subparsers.add_parser("close")
    _issues_and_comment(parser_close)
    parser_close.set_defaults(func=issue_close)

    parser_reopen = subparsers.add_parser("reopen")
    _issues_and_comment(parser_reopen)
    parser_reopen.set_defaults(func=issue_open)

    parser_update = subparsers.add_parser("update")
    _issues(parser_update)
    _ticket_args(parser_update, conf)
    parser_update.add_argument("-d", "--description")
    parser_update.add_argument("-i", "--issuetitle", dest="title")
    parser_update.add_argument(
        "-n",
        "--node",
        nargs="+",
        help="Warning: Changing the node name will NOT drain a node nor resume the old node name",
    )
    parser_update.set_defaults(func=issue_update)

    parser_opencmd = subparsers.add_parser("open")
    parser_opencmd.add_argument("title")
    parser_opencmd.add_argument("description")
    parser_opencmd.add_argument(
        "nodes",
        nargs="+",
        help="Warning: Changing the node name will NOT drain a node nor resume the old node name",
    )
    _ticket_args(parser_opencmd, conf)
    parser_opencmd.set_defaults(func=issue_open)

    return parser

def issue_release_sibs(cluster, args, conf):
    pass

def issue_update(cluster, args, conf):
    pass

def issue_open(cluster, args, conf):
    issue = ctt.Issue(title=args.title, description=args.description, ticket=args.ticket, severity=args.severity, created_by=args.user, type=ctt.IssueType.SOFTWARE, nodes=args.nodes)
    cttissue = cluster.open(issue)
    print(f"Issue oppened with id: {cttissue}")

def issue_close(cluster, args, conf):
    pass
def issue_attach(cluster, args, conf):
    pass
def issue_list(cluster, args, conf):
    for issue in cluster.issue_list():
        print(issue)
def issue_show(cluster, args, conf):
    pass
def issue_stats(cluster, args, conf):
    pass
def issue_comment(cluster, args, conf):
    pass
def ticket_close(cluster, args, conf):
    pass
def ticket_open(cluster, args, conf):
    pass


if "__main__" == __name__:
    main()
    sys.exit(0)
